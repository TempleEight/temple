package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/squat/and/dab/templeuser/dao"
	"github.com/squat/and/dab/templeuser/util"
	valid "github.com/asaskevich/govalidator"
	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

// env defines the environment that requests should be executed within
type env struct {
	dao dao.Datastore
}

// createTempleuserRequest contains the client-provided information required to create a single templeuser
type createTempleuserRequest struct {
	Username           *string    `valid:"type(string),required"`
	Email              *string    `valid:"type(string),required,stringlength(5|40)"`
	FirstName          *string    `valid:"type(string),required"`
	LastName           *string    `valid:"type(string),required"`
	CreatedAt          *time.Time `valid:"type(string),rfc3339,required"`
	NumberOfDogs       *int32     `valid:"type(int32),required"`
	CurrentBankBalance *float32   `valid:"type(float32),required"`
	BirthDate          *time.Time `valid:"type(string),required"`
	BreakfastTime      *time.Time `valid:"type(string),required"`
}

// updateTempleuserRequest contains the client-provided information required to update a single templeuser
type updateTempleuserRequest struct {
	Username           *string    `valid:"type(string),required"`
	Email              *string    `valid:"type(string),required,stringlength(5|40)"`
	FirstName          *string    `valid:"type(string),required"`
	LastName           *string    `valid:"type(string),required"`
	CreatedAt          *time.Time `valid:"type(string),rfc3339,required"`
	NumberOfDogs       *int32     `valid:"type(int32),required"`
	CurrentBankBalance *float32   `valid:"type(float32),required"`
	BirthDate          *time.Time `valid:"type(string),required"`
	BreakfastTime      *time.Time `valid:"type(string),required"`
}

// listTempleuserElement contains a single templeuser list element
type listTempleuserElement struct {
	ID                 uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          string
	NumberOfDogs       int32
	CurrentBankBalance float32
	BirthDate          string
	BreakfastTime      string
}

// listTempleuserResponse contains a single templeuser list to be returned to the client
type listTempleuserResponse struct {
	TempleuserList []listTempleuserElement
}

// createTempleuserResponse contains a newly created templeuser to be returned to the client
type createTempleuserResponse struct {
	ID                 uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          string
	NumberOfDogs       int32
	CurrentBankBalance float32
	BirthDate          string
	BreakfastTime      string
}

// readTempleuserResponse contains a single templeuser to be returned to the client
type readTempleuserResponse struct {
	ID                 uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          string
	NumberOfDogs       int32
	CurrentBankBalance float32
	BirthDate          string
	BreakfastTime      string
}

// updateTempleuserResponse contains a newly updated templeuser to be returned to the client
type updateTempleuserResponse struct {
	ID                 uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          string
	NumberOfDogs       int32
	CurrentBankBalance float32
	BirthDate          string
	BreakfastTime      string
}

// router generates a router for this service
func (env *env) router() *mux.Router {
	r := mux.NewRouter()
	// Mux directs to first matching route, i.e. the order matters
	r.HandleFunc("/templeuser/all", env.listTempleuserHandler).Methods(http.MethodGet)
	r.HandleFunc("/templeuser", env.createTempleuserHandler).Methods(http.MethodPost)
	r.HandleFunc("/templeuser/{id}", env.readTempleuserHandler).Methods(http.MethodGet)
	r.HandleFunc("/templeuser/{id}", env.updateTempleuserHandler).Methods(http.MethodPut)
	r.Use(jsonMiddleware)
	return r
}

func main() {
	configPtr := flag.String("config", "/etc/templeuser-service/config.json", "configuration filepath")
	flag.Parse()

	// Require all struct fields by default
	valid.SetFieldsRequiredByDefault(true)

	config, err := util.GetConfig(*configPtr)
	if err != nil {
		log.Fatal(err)
	}

	d, err := dao.Init(config)
	if err != nil {
		log.Fatal(err)
	}

	env := env{d}

	log.Fatal(http.ListenAndServe(":1025", env.router()))
}

func jsonMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// All responses are JSON, set header accordingly
		w.Header().Set("Content-Type", "application/json")
		next.ServeHTTP(w, r)
	})
}

func (env *env) listTempleuserHandler(w http.ResponseWriter, r *http.Request) {
	templeuserList, err := env.dao.ListTempleuser()
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Something went wrong: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	templeuserListResp := listTempleuserResponse{
		TempleuserList: make([]listTempleuserElement, 0),
	}

	for _, templeuser := range *templeuserList {
		templeuserListResp.TempleuserList = append(templeuserListResp.TempleuserList, listTempleuserElement{
			ID:                 templeuser.ID,
			Username:           templeuser.Username,
			Email:              templeuser.Email,
			FirstName:          templeuser.FirstName,
			LastName:           templeuser.LastName,
			CreatedAt:          templeuser.CreatedAt.Format(time.RFC3339),
			NumberOfDogs:       templeuser.NumberOfDogs,
			CurrentBankBalance: templeuser.CurrentBankBalance,
			BirthDate:          templeuser.BirthDate,
			BreakfastTime:      templeuser.BreakfastTime,
		})
	}

	json.NewEncoder(w).Encode(templeuserListResp)
}

func (env *env) createTempleuserHandler(w http.ResponseWriter, r *http.Request) {
	auth, err := util.ExtractAuthIDFromRequest(r.Header)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Could not authorize request: %s", err.Error()))
		http.Error(w, errMsg, http.StatusUnauthorized)
		return
	}

	var req createTempleuserRequest
	err = json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid request parameters: %s", err.Error()))
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	if req.Username == nil || req.Email == nil || req.FirstName == nil || req.LastName == nil || req.CreatedAt == nil || req.NumberOfDogs == nil || req.CurrentBankBalance == nil || req.BirthDate == nil || req.BreakfastTime == nil {
		errMsg := util.CreateErrorJSON("Missing request parameter(s)")
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	_, err = valid.ValidateStruct(req)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid request parameters: %s", err.Error()))
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	uuid, err := uuid.NewUUID()
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Could not create UUID: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	templeuser, err := env.dao.CreateTempleuser(dao.CreateTempleuserInput{
		ID:                 uuid,
		AuthID:             auth.ID,
		Username:           *req.Username,
		Email:              *req.Email,
		FirstName:          *req.FirstName,
		LastName:           *req.LastName,
		CreatedAt:          *req.CreatedAt,
		NumberOfDogs:       *req.NumberOfDogs,
		CurrentBankBalance: *req.CurrentBankBalance,
		BirthDate:          *req.BirthDate,
		BreakfastTime:      *req.BreakfastTime,
	})
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Something went wrong: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(createTempleuserResponse{
		ID:                 templeuser.ID,
		Username:           templeuser.Username,
		Email:              templeuser.Email,
		FirstName:          templeuser.FirstName,
		LastName:           templeuser.LastName,
		CreatedAt:          templeuser.CreatedAt.Format(time.RFC3339),
		NumberOfDogs:       templeuser.NumberOfDogs,
		CurrentBankBalance: templeuser.CurrentBankBalance,
		BirthDate:          templeuser.BirthDate,
		BreakfastTime:      templeuser.BreakfastTime,
	})
}

func (env *env) readTempleuserHandler(w http.ResponseWriter, r *http.Request) {

}

func (env *env) updateTempleuserHandler(w http.ResponseWriter, r *http.Request) {

}
