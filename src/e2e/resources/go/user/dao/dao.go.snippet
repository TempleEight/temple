package dao

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/squat/and/dab/temple-user/util"
	"github.com/google/uuid"

	// pq acts as the driver for SQL requests
	_ "github.com/lib/pq"
)

// Datastore provides the interface adopted by the DAO, allowing for mocking
type Datastore interface {
	ListTempleUser() (*[]TempleUser, error)
	CreateTempleUser(input CreateTempleUserInput) (*TempleUser, error)
	ReadTempleUser(input ReadTempleUserInput) (*TempleUser, error)
	UpdateTempleUser(input UpdateTempleUserInput) (*TempleUser, error)
}

// DAO encapsulates access to the datastore
type DAO struct {
	DB *sql.DB
}

// TempleUser encapsulates the object stored in the datastore
type TempleUser struct {
	ID                 uuid.UUID
	CreatedBy          uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          time.Time
	NumberOfDogs       int32
	Yeets              bool
	CurrentBankBalance float32
	BirthDate          time.Time
	BreakfastTime      time.Time
}

// CreateTempleUserInput encapsulates the information required to create a single templeUser in the datastore
type CreateTempleUserInput struct {
	ID                 uuid.UUID
	AuthID             uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          time.Time
	NumberOfDogs       int32
	Yeets              bool
	CurrentBankBalance float32
	BirthDate          time.Time
	BreakfastTime      time.Time
}

// ReadTempleUserInput encapsulates the information required to read a single templeUser in the datastore
type ReadTempleUserInput struct {
	ID uuid.UUID
}

// UpdateTempleUserInput encapsulates the information required to update a single templeUser in the datastore
type UpdateTempleUserInput struct {
	ID                 uuid.UUID
	Username           string
	Email              string
	FirstName          string
	LastName           string
	CreatedAt          time.Time
	NumberOfDogs       int32
	Yeets              bool
	CurrentBankBalance float32
	BirthDate          time.Time
	BreakfastTime      time.Time
}

// Init opens the datastore connection, returning a DAO
func Init(config *util.Config) (*DAO, error) {
	connStr := fmt.Sprintf("user=%s dbname=%s host=%s sslmode=%s", config.User, config.DBName, config.Host, config.SSLMode)
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		return nil, err
	}
	return &DAO{db}, nil
}

// Executes a query, returning the rows
func executeQueryWithRowResponses(db *sql.DB, query string, args ...interface{}) (*sql.Rows, error) {
	return db.Query(query, args...)
}

// Executes a query, returning the row
func executeQueryWithRowResponse(db *sql.DB, query string, args ...interface{}) *sql.Row {
	return db.QueryRow(query, args...)
}

// CreateTempleUser creates a new templeUser in the datastore, returning the newly created templeUser
func (dao *DAO) CreateTempleUser(input CreateTempleUserInput) (*TempleUser, error) {
	row := executeQueryWithRowResponse(dao.DB, "INSERT INTO temple_user (username, email, firstName, lastName, createdAt, numberOfDogs, yeets, currentBankBalance, birthDate, breakfastTime) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING username, email, firstName, lastName, createdAt, numberOfDogs, yeets, currentBankBalance, birthDate, breakfastTime;", input.ID, input.Username, input.Email, input.FirstName, input.LastName, input.CreatedAt, input.NumberOfDogs, input.Yeets, input.CurrentBankBalance, input.BirthDate, input.BreakfastTime)

	var templeUser TempleUser
	err := row.Scan(&templeUser.ID, &templeUser.CreatedBy, &templeUser.Username, &templeUser.Email, &templeUser.FirstName, &templeUser.LastName, &templeUser.CreatedAt, &templeUser.NumberOfDogs, &templeUser.Yeets, &templeUser.CurrentBankBalance, &templeUser.BirthDate, &templeUser.BreakfastTime)
	if err != nil {
		return nil, err
	}

	return &templeUser, nil
}

// ReadTempleUser returns the templeUser in the datastore for a given ID
func (dao *DAO) ReadTempleUser(input ReadTempleUserInput) (*TempleUser, error) {
	row := executeQueryWithRowResponse(dao.DB, "SELECT username, email, firstName, lastName, createdAt, numberOfDogs, yeets, currentBankBalance, birthDate, breakfastTime FROM temple_user WHERE id = $1;", input.ID)

	var templeUser TempleUser
	err := row.Scan(&templeUser.ID, &templeUser.CreatedBy, &templeUser.Username, &templeUser.Email, &templeUser.FirstName, &templeUser.LastName, &templeUser.CreatedAt, &templeUser.NumberOfDogs, &templeUser.Yeets, &templeUser.CurrentBankBalance, &templeUser.BirthDate, &templeUser.BreakfastTime)
	if err != nil {
		switch err {
		case sql.ErrNoRows:
			return nil, ErrTempleUserNotFound(input.ID.String())
		default:
			return nil, err
		}
	}

	return &templeUser, nil
}

// UpdateTempleUser updates the templeUser in the datastore for a given ID, returning the newly updated templeUser
func (dao *DAO) UpdateTempleUser(input UpdateTempleUserInput) (*TempleUser, error) {
	row := executeQueryWithRowResponse(dao.DB, "UPDATE temple_user SET username = $1, email = $2, firstName = $3, lastName = $4, createdAt = $5, numberOfDogs = $6, yeets = $7, currentBankBalance = $8, birthDate = $9, breakfastTime = $10 WHERE id = $11 RETURNING username, email, firstName, lastName, createdAt, numberOfDogs, yeets, currentBankBalance, birthDate, breakfastTime;", input.Username, input.Email, input.FirstName, input.LastName, input.CreatedAt, input.NumberOfDogs, input.Yeets, input.CurrentBankBalance, input.BirthDate, input.BreakfastTime, input.ID)

	var templeUser TempleUser
	err := row.Scan(&templeUser.ID, &templeUser.CreatedBy, &templeUser.Username, &templeUser.Email, &templeUser.FirstName, &templeUser.LastName, &templeUser.CreatedAt, &templeUser.NumberOfDogs, &templeUser.Yeets, &templeUser.CurrentBankBalance, &templeUser.BirthDate, &templeUser.BreakfastTime)
	if err != nil {
		switch err {
		case sql.ErrNoRows:
			return nil, ErrTempleUserNotFound(input.ID.String())
		default:
			return nil, err
		}
	}

	return &templeUser, nil
}

// ListTempleUser returns a list containing every templeUser in the datastore
func (dao *DAO) ListTempleUser() (*[]TempleUser, error) {
	rows, err := executeQueryWithRowResponses(dao.DB, "SELECT username, email, firstName, lastName, createdAt, numberOfDogs, yeets, currentBankBalance, birthDate, breakfastTime FROM temple_user;")
	if err != nil {
		return nil, err
	}

	templeUserList := make([]TempleUser, 0)
	for rows.Next() {
		var templeUser TempleUser
		err = rows.Scan(&templeUser.ID, &templeUser.CreatedBy, &templeUser.Username, &templeUser.Email, &templeUser.FirstName, &templeUser.LastName, &templeUser.CreatedAt, &templeUser.NumberOfDogs, &templeUser.Yeets, &templeUser.CurrentBankBalance, &templeUser.BirthDate, &templeUser.BreakfastTime)
		if err != nil {
			return nil, err
		}
		templeUserList = append(templeUserList, templeUser)
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}

	return &templeUserList, nil
}
