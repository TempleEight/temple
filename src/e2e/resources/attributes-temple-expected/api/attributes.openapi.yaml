openapi: 3.0.0
info:
  title: Attributes
  version: 0.0.1
paths:
  /example:
    post:
      summary: Register a new example
      tags:
      - Example
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientAttribute:
                  type: string
      responses:
        '200':
          description: Example successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  serverSetAttribute:
                    type: boolean
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '500':
          $ref: '#/components/responses/Error500'
  /example/{id}:
    parameters:
    - in: path
      name: id
      schema:
        type: string
        format: uuid
      required: true
      description: ID of the example to perform operations on
    get:
      summary: Look up a single example
      tags:
      - Example
      responses:
        '200':
          description: Example details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  serverSetAttribute:
                    type: boolean
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'
    put:
      summary: Update a single example
      tags:
      - Example
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientAttribute:
                  type: string
      responses:
        '200':
          description: Example successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  serverSetAttribute:
                    type: boolean
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'
    delete:
      summary: Delete a single example
      tags:
      - Example
      responses:
        '200':
          description: Example successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'
components:
  responses:
    Error400:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Invalid request parameters: name'
    Error401:
      description: Valid request but forbidden by server
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not authorised to create this object
    Error404:
      description: ID not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Object not found with ID 1
    Error500:
      description: The server encountered an error while serving this request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Unable to reach user service: connection timeout'
