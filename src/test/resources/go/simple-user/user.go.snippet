package main

import (
	"net/http"
	"time"

	"github.com/squat/and/dab/templeuser/dao"
	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

// env defines the environment that requests should be executed within
type env struct {
	dao dao.Datastore
}

// createTempleuserRequest contains the client-provided information required to create a single templeuser
type createTempleuserRequest struct {
	IntField      *int32     `valid:"type(int32),required"`
	DoubleField   *float64   `valid:"type(float64),required"`
	StringField   *string    `valid:"type(string),required"`
	BoolField     *bool      `valid:"type(bool),required"`
	DateField     *time.Time `valid:"type(string),required"`
	TimeField     *time.Time `valid:"type(string),required"`
	DateTimeField *time.Time `valid:"type(string),rfc3339,required"`
	BlobField     *[]byte    `valid:"type(string),base64,required"`
}

// updateTempleuserRequest contains the client-provided information required to update a single templeuser
type updateTempleuserRequest struct {
	IntField      *int32     `valid:"type(int32),required"`
	DoubleField   *float64   `valid:"type(float64),required"`
	StringField   *string    `valid:"type(string),required"`
	BoolField     *bool      `valid:"type(bool),required"`
	DateField     *time.Time `valid:"type(string),required"`
	TimeField     *time.Time `valid:"type(string),required"`
	DateTimeField *time.Time `valid:"type(string),rfc3339,required"`
	BlobField     *[]byte    `valid:"type(string),base64,required"`
}

// createTempleuserResponse contains a newly created templeuser to be returned to the client
type createTempleuserResponse struct {
	ID            uuid.UUID
	IntField      int32
	DoubleField   float64
	StringField   string
	BoolField     bool
	DateField     string
	TimeField     string
	DateTimeField string
	BlobField     string
}

// readTempleuserResponse contains a single templeuser to be returned to the client
type readTempleuserResponse struct {
	ID            uuid.UUID
	IntField      int32
	DoubleField   float64
	StringField   string
	BoolField     bool
	DateField     string
	TimeField     string
	DateTimeField string
	BlobField     string
}

// updateTempleuserResponse contains a newly updated templeuser to be returned to the client
type updateTempleuserResponse struct {
	ID            uuid.UUID
	IntField      int32
	DoubleField   float64
	StringField   string
	BoolField     bool
	DateField     string
	TimeField     string
	DateTimeField string
	BlobField     string
}

// router generates a router for this service
func (env *env) router() *mux.Router {
	r := mux.NewRouter()
	// Mux directs to first matching route, i.e. the order matters
	r.HandleFunc("/templeuser", env.createTempleuserHandler).Methods(http.MethodPost)
	r.HandleFunc("/templeuser/{id}", env.readTempleuserHandler).Methods(http.MethodGet)
	r.HandleFunc("/templeuser/{id}", env.updateTempleuserHandler).Methods(http.MethodPut)
	r.HandleFunc("/templeuser/{id}", env.deleteTempleuserHandler).Methods(http.MethodDelete)
	r.Use(jsonMiddleware)
	return r
}

func main() {

}

func jsonMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// All responses are JSON, set header accordingly
		w.Header().Set("Content-Type", "application/json")
		next.ServeHTTP(w, r)
	})
}

func (env *env) createTempleuserHandler(w http.ResponseWriter, r *http.Request) {}

func (env *env) readTempleuserHandler(w http.ResponseWriter, r *http.Request) {}

func (env *env) updateTempleuserHandler(w http.ResponseWriter, r *http.Request) {}

func (env *env) deleteTempleuserHandler(w http.ResponseWriter, r *http.Request) {}
