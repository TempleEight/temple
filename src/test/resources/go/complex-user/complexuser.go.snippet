package main

import (
	"net/http"
	"time"

	"github.com/squat/and/dab/complexuser/dao"
	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

// env defines the environment that requests should be executed within
type env struct {
	dao dao.Datastore
}

// createComplexuserRequest contains the client-provided information required to create a single complexuser
type createComplexuserRequest struct {
	SmallIntField      *uint16    `valid:"-"`
	IntField           *uint32    `valid:"-"`
	BigIntField        *uint64    `valid:"-"`
	FloatField         *float32   `valid:"-"`
	DoubleField        *float64   `valid:"-"`
	StringField        *string    `valid:"-"`
	BoundedStringField *string    `valid:"-"`
	BoolField          *bool      `valid:"-"`
	DateField          *time.Time `valid:"-"`
	TimeField          *time.Time `valid:"-"`
	DateTimeField      *time.Time `valid:"-"`
	BlobField          *[]byte    `valid:"-"`
}

// updateComplexuserRequest contains the client-provided information required to update a single complexuser
type updateComplexuserRequest struct {
	SmallIntField      *uint16    `valid:"-"`
	IntField           *uint32    `valid:"-"`
	BigIntField        *uint64    `valid:"-"`
	FloatField         *float32   `valid:"-"`
	DoubleField        *float64   `valid:"-"`
	StringField        *string    `valid:"-"`
	BoundedStringField *string    `valid:"-"`
	BoolField          *bool      `valid:"-"`
	DateField          *time.Time `valid:"-"`
	TimeField          *time.Time `valid:"-"`
	DateTimeField      *time.Time `valid:"-"`
	BlobField          *[]byte    `valid:"-"`
}

// createComplexuserResponse contains a newly created complexuser to be returned to the client
type createComplexuserResponse struct {
	ID                 uuid.UUID
	SmallIntField      uint16
	IntField           uint32
	BigIntField        uint64
	FloatField         float32
	DoubleField        float64
	StringField        string
	BoundedStringField string
	BoolField          bool
	DateField          string
	TimeField          string
	DateTimeField      string
	BlobField          string
}

// readComplexuserResponse contains a single complexuser to be returned to the client
type readComplexuserResponse struct {
	ID                 uuid.UUID
	SmallIntField      uint16
	IntField           uint32
	BigIntField        uint64
	FloatField         float32
	DoubleField        float64
	StringField        string
	BoundedStringField string
	BoolField          bool
	DateField          string
	TimeField          string
	DateTimeField      string
	BlobField          string
}

// updateComplexuserResponse contains a newly updated complexuser to be returned to the client
type updateComplexuserResponse struct {
	ID                 uuid.UUID
	SmallIntField      uint16
	IntField           uint32
	BigIntField        uint64
	FloatField         float32
	DoubleField        float64
	StringField        string
	BoundedStringField string
	BoolField          bool
	DateField          string
	TimeField          string
	DateTimeField      string
	BlobField          string
}

// router generates a router for this service
func (env *env) router() *mux.Router {
	r := mux.NewRouter()
	// Mux directs to first matching route, i.e. the order matters
	r.HandleFunc("/complexuser", env.createComplexuserHandler).Methods(http.MethodPost)
	r.HandleFunc("/complexuser/{id}", env.readComplexuserHandler).Methods(http.MethodGet)
	r.HandleFunc("/complexuser/{id}", env.updateComplexuserHandler).Methods(http.MethodPut)
	r.HandleFunc("/complexuser/{id}", env.deleteComplexuserHandler).Methods(http.MethodDelete)
	r.Use(jsonMiddleware)
	return r
}

func main() {

}

func jsonMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// All responses are JSON, set header accordingly
		w.Header().Set("Content-Type", "application/json")
		next.ServeHTTP(w, r)
	})
}

func (env *env) createComplexuserHandler(w http.ResponseWriter, r *http.Request) {}

func (env *env) readComplexuserHandler(w http.ResponseWriter, r *http.Request) {}

func (env *env) updateComplexuserHandler(w http.ResponseWriter, r *http.Request) {}

func (env *env) deleteComplexuserHandler(w http.ResponseWriter, r *http.Request) {}
