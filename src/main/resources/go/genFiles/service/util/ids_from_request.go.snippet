// ExtractIDFromRequest extracts the parameter provided under parameter ID and converts it into a UUID
func ExtractIDFromRequest(requestParams map[string]string) (uuid.UUID, error) {
	id := requestParams["id"]
	if len(id) == 0 {
		return uuid.Nil, errors.New("No ID provided")
	}

	return uuid.Parse(id)
}

// ExtractIDFromRequest extracts the parameter provided under parameter parent_id and converts it into a UUID
func ExtractParentIDFromRequest(requestParams map[string]string) (uuid.UUID, error) {
	id := requestParams["parent_id"]
	if len(id) == 0 {
		return uuid.Nil, errors.New("No Service ID provided")
	}

	return uuid.Parse(id)
}

// ExtractAuthIDFromRequest extracts a token from a header of the form `Authorization: Bearer <token>`
func ExtractAuthIDFromRequest(headers http.Header) (*Auth, error) {
	authHeader := headers.Get("Authorization")
	if len(authHeader) == 0 {
		return nil, errors.New("Authorization header not provided")
	}

	// Extract and parse JWT
	rawToken := strings.Replace(authHeader, "Bearer ", "", 1)
	jwtParser := jwt.Parser{UseJSONNumber: true}
	token, _, err := jwtParser.ParseUnverified(rawToken, jwt.MapClaims{})
	if err != nil {
		return nil, err
	}

	// Extract claims from JWT
	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return nil, errors.New("JWT claims are invalid")
	}

	// Extract ID from JWT claims
	id, ok := claims["id"]
	if !ok {
		return nil, errors.New("JWT does not contain an id")
	}

	// Convert to a UUID
	uuid, err := uuid.Parse(id.(string))
	if err != nil {
		return nil, err
	}

	return &Auth{uuid}, nil
}
