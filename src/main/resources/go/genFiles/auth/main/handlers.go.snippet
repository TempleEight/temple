func (env *env) registerAuthHandler(w http.ResponseWriter, r *http.Request) {
	var req registerAuthRequest
	err := json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid request parameters: %s", err.Error()))
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	_, err = valid.ValidateStruct(req)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid request parameters: %s", err.Error()))
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	// Hash and salt the password before storing
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Could not hash password: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	uuid, err := uuid.NewUUID()
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Could not create UUID: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	input := dao.CreateAuthInput{
		ID:       uuid,
		Email:    req.Email,
		Password: string(hashedPassword),
	}

	for _, hook := range env.hook.beforeRegisterHooks {
		err := (*hook)(env, req, &input)
		if err != nil {
			// TODO
			return
		}
	}

	auth, err := env.dao.CreateAuth(input)
	if err != nil {
		switch err {
		case dao.ErrDuplicateAuth:
			http.Error(w, util.CreateErrorJSON(err.Error()), http.StatusForbidden)
		default:
			errMsg := util.CreateErrorJSON(fmt.Sprintf("Something went wrong: %s", err.Error()))
			http.Error(w, errMsg, http.StatusInternalServerError)
		}
		return
	}

	accessToken, err := createToken(auth.ID, env.jwtCredential.Key, env.jwtCredential.Secret)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Could not create access token: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	for _, hook := range env.hook.afterRegisterHooks {
		err := (*hook)(env, auth, accessToken)
		if err != nil {
			// TODO
			return
		}
	}

	json.NewEncoder(w).Encode(registerAuthResponse{
		AccessToken: accessToken,
	})
}

func (env *env) loginAuthHandler(w http.ResponseWriter, r *http.Request) {
	var req loginAuthRequest
	err := json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid request parameters: %s", err.Error()))
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	_, err = valid.ValidateStruct(req)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid request parameters: %s", err.Error()))
		http.Error(w, errMsg, http.StatusBadRequest)
		return
	}

	input := dao.ReadAuthInput{
		Email: req.Email,
	}

	for _, hook := range env.hook.beforeLoginHooks {
		err := (*hook)(env, req, &input)
		if err != nil {
			// TODO
			return
		}
	}

	auth, err := env.dao.ReadAuth(input)
	if err != nil {
		switch err {
		case dao.ErrAuthNotFound:
			errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid email or password"))
			http.Error(w, errMsg, http.StatusUnauthorized)
		default:
			errMsg := util.CreateErrorJSON(fmt.Sprintf("Something went wrong: %s", err.Error()))
			http.Error(w, errMsg, http.StatusInternalServerError)
		}
		return
	}

	err = bcrypt.CompareHashAndPassword([]byte(auth.Password), []byte(req.Password))
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Invalid email or password"))
		http.Error(w, errMsg, http.StatusUnauthorized)
		return
	}

	accessToken, err := createToken(auth.ID, env.jwtCredential.Key, env.jwtCredential.Secret)
	if err != nil {
		errMsg := util.CreateErrorJSON(fmt.Sprintf("Could not create access token: %s", err.Error()))
		http.Error(w, errMsg, http.StatusInternalServerError)
		return
	}

	for _, hook := range env.hook.afterLoginHooks {
		err := (*hook)(env, auth, accessToken)
		if err != nil {
			// TODO
			return
		}
	}

	json.NewEncoder(w).Encode(loginAuthResponse{
		AccessToken: accessToken,
	})
}
